
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from "@/lib/supabase";
import { useToast } from "@/hooks/use-toast";
import { FormValues } from './types';

export const useAdminLogin = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const { toast } = useToast();
  const navigate = useNavigate();
  
  const handleLogin = async (values: FormValues) => {
    setIsLoading(true);
    setErrorMessage(null);
    
    try {
      console.log("üîê Tentando login admin direto na tabela admins:", values.email);
      
      // ‚úÖ PRIMEIRO: Verificar se admin existe na tabela admins
      const { data: admin, error: adminError } = await supabase
        .from('admins')
        .select('id, email, password, is_superadmin')
        .eq('email', values.email)
        .maybeSingle();

      if (adminError || !admin) {
        console.error("‚ùå Admin n√£o encontrado na tabela admins:", adminError);
        setErrorMessage("Credenciais inv√°lidas ou usu√°rio n√£o √© administrador.");
        toast({
          variant: "destructive",
          title: "Acesso negado",
          description: "Voc√™ n√£o tem permiss√£o de administrador.",
        });
        return;
      }

      console.log("‚úÖ Admin encontrado na tabela admins:", admin.email);

      // ‚úÖ VERIFICAR SENHA DIRETAMENTE
      // Verificar se a senha est√° hasheada (bcrypt) ou √© texto simples
      let passwordValid = false;
      
      // Se a senha come√ßa com $2a$, $2b$, $2x$, $2y$ √© um hash bcrypt
      const isBcryptHash = /^\$2[abxy]\$/.test(admin.password);
      
      if (isBcryptHash) {
        try {
          // Importar bcrypt dinamicamente
          const bcrypt = await import('bcryptjs');
          passwordValid = await bcrypt.compare(values.password, admin.password);
          console.log("‚úÖ Verifica√ß√£o de senha hash bcrypt:", passwordValid);
        } catch (bcryptError) {
          console.error("‚ùå Erro ao verificar hash bcrypt:", bcryptError);
          passwordValid = false;
        }
      } else {
        // Compara√ß√£o direta para senhas em texto simples
        passwordValid = values.password === admin.password;
        console.log("‚úÖ Verifica√ß√£o de senha direta:", passwordValid);
      }

      if (!passwordValid) {
        console.error("‚ùå Senha incorreta para admin:", admin.email);
        setErrorMessage("Credenciais inv√°lidas. Verifique seu email e senha.");
        toast({
          variant: "destructive",
          title: "Credenciais inv√°lidas",
          description: "Verifique seu email e senha.",
        });
        return;
      }

      console.log("‚úÖ Senha validada com sucesso para admin:", admin.email);

      // ‚úÖ TERCEIRO: Criar sess√£o direta usando os dados da tabela admins
      // Como estamos autenticando diretamente na tabela admins, vamos usar o ID do admin
      const userId = admin.id;
      console.log("‚úÖ Usando ID do admin da tabela admins:", userId);

      // Opcional: Tentar tamb√©m autenticar no Supabase Auth se o usu√°rio existir l√°
      try {
        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
          email: values.email,
          password: values.password,
        });

        if (!authError && authData.session) {
          console.log("‚úÖ Bonus: Autentica√ß√£o Supabase tamb√©m bem-sucedida");
          // Usar o ID do Supabase Auth se dispon√≠vel
          // userId = authData.user.id;
        } else {
          console.log("‚ö†Ô∏è Autentica√ß√£o Supabase falhou, mas continuando com dados da tabela admins");
        }
      } catch (authAttemptError) {
        console.log("‚ö†Ô∏è Erro na tentativa de autentica√ß√£o Supabase, continuando com tabela admins");
      }

      // ‚úÖ CRIAR/ATUALIZAR PERFIL ADMIN NA TABELA PROFILES
      const adminRole = admin.is_superadmin ? 'superadmin' : 'admin';
      
      console.log("üîß Criando/atualizando perfil admin na tabela profiles...");
      const { error: profileError } = await supabase
        .from('profiles')
        .upsert({
          id: userId,
          email: admin.email,
          role: adminRole,
          is_active: true,
          created_at: new Date().toISOString()
        }, {
          onConflict: 'id'
        });

      if (profileError) {
        console.warn("‚ö†Ô∏è Erro ao criar/atualizar perfil admin:", profileError);
        // N√£o bloquear o login por isso, apenas avisar
      } else {
        console.log("‚úÖ Perfil admin criado/atualizado com sucesso");
      }

      toast({
        title: "Login realizado com sucesso",
        description: `Bem-vindo ao painel administrativo, ${admin.email}`,
      });

      console.log("‚û°Ô∏è Redirecionando para dashboard admin");
      navigate("/admin");
    } catch (error: any) {
      console.error("üí• Erro inesperado:", error);
      setErrorMessage('Ocorreu um erro durante o login. ' + (error.message || ''));
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Ocorreu um erro durante o login.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return {
    isLoading,
    errorMessage,
    handleLogin,
  };
};

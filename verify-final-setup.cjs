const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://yjhcozddtbpzvnppcggf.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlqaGNvemRkdGJwenZucHBjZ2dmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyNjY0NTAsImV4cCI6MjA2Mjg0MjQ1MH0.oO2SwcWl3BPrLqmPE5FVJh3ISmAXhr8KyMJ9jwTkAO0';

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyFinalSetup() {
  console.log('üîç Verificando configura√ß√£o final dos planos...\n');
  
  let allGood = true;
  const issues = [];
  
  try {
    // 1. Verificar se a tabela plan_configurations existe e tem dados
    console.log('1Ô∏è‚É£ Verificando tabela plan_configurations...');
    const { data: plans, error: plansError } = await supabase
      .from('plan_configurations')
      .select('*')
      .order('display_order');
    
    if (plansError) {
      console.log('‚ùå Erro ao acessar plan_configurations:', plansError.message);
      issues.push('Tabela plan_configurations inacess√≠vel');
      allGood = false;
    } else if (!plans || plans.length === 0) {
      console.log('‚ùå Nenhum plano encontrado');
      issues.push('Nenhum plano configurado');
      allGood = false;
    } else {
      console.log(`‚úÖ Encontrados ${plans.length} planos`);
      
      // Verificar pre√ßos espec√≠ficos
      const mensalPlan = plans.find(p => p.billing_cycle === 'mensal');
      const anualPlan = plans.find(p => p.billing_cycle === 'anual');
      
      if (mensalPlan && mensalPlan.price === 197.90) {
        console.log('‚úÖ Plano mensal: R$ 197,90 ‚úì');
      } else {
        console.log(`‚ùå Plano mensal: R$ ${mensalPlan?.price || 'N/A'} (esperado: R$ 197,90)`);
        issues.push('Pre√ßo do plano mensal incorreto');
        allGood = false;
      }
      
      if (anualPlan && anualPlan.price === 1970.00) {
        console.log('‚úÖ Plano anual: R$ 1.970,00 ‚úì');
      } else {
        console.log(`‚ùå Plano anual: R$ ${anualPlan?.price || 'N/A'} (esperado: R$ 1.970,00)`);
        issues.push('Pre√ßo do plano anual incorreto');
        allGood = false;
      }
      
      // Verificar links do Cakto
      if (mensalPlan?.affiliate_link?.includes('cackto.com.br')) {
        console.log('‚úÖ Link Cakto mensal configurado');
      } else {
        console.log('‚ùå Link Cakto mensal n√£o configurado');
        issues.push('Link Cakto mensal ausente');
        allGood = false;
      }
      
      if (anualPlan?.affiliate_link?.includes('cackto.com.br')) {
        console.log('‚úÖ Link Cakto anual configurado');
      } else {
        console.log('‚ùå Link Cakto anual n√£o configurado');
        issues.push('Link Cakto anual ausente');
        allGood = false;
      }
    }
    
    // 2. Verificar se a tabela payment_transactions existe
    console.log('\n2Ô∏è‚É£ Verificando tabela payment_transactions...');
    const { data: transactions, error: transError } = await supabase
      .from('payment_transactions')
      .select('count')
      .limit(1);
    
    if (transError) {
      if (transError.code === '42P01') {
        console.log('‚ùå Tabela payment_transactions n√£o existe');
        issues.push('Tabela payment_transactions n√£o criada');
        allGood = false;
      } else {
        console.log('‚ùå Erro ao acessar payment_transactions:', transError.message);
        issues.push('Problema com tabela payment_transactions');
        allGood = false;
      }
    } else {
      console.log('‚úÖ Tabela payment_transactions existe');
    }
    
    // 3. Verificar webhook do Cakto
    console.log('\n3Ô∏è‚É£ Verificando webhook do Cakto...');
    const fs = require('fs');
    const path = require('path');
    
    const webhookPath = path.join(process.cwd(), 'supabase', 'functions', 'cakto-webhook', 'index.ts');
    if (fs.existsSync(webhookPath)) {
      const webhookContent = fs.readFileSync(webhookPath, 'utf8');
      
      if (webhookContent.includes('x-cakto-signature')) {
        console.log('‚úÖ Valida√ß√£o de assinatura webhook configurada');
      } else {
        console.log('‚ùå Valida√ß√£o de assinatura webhook n√£o encontrada');
        issues.push('Webhook sem valida√ß√£o de assinatura');
        allGood = false;
      }
      
      if (webhookContent.includes('payment_transactions')) {
        console.log('‚úÖ Registro de transa√ß√µes no webhook configurado');
      } else {
        console.log('‚ùå Registro de transa√ß√µes no webhook n√£o encontrado');
        issues.push('Webhook n√£o registra transa√ß√µes');
        allGood = false;
      }
      
      if (webhookContent.includes('productMapping')) {
        console.log('‚úÖ Mapeamento de produtos configurado');
      } else {
        console.log('‚ùå Mapeamento de produtos n√£o encontrado');
        issues.push('Mapeamento de produtos ausente');
        allGood = false;
      }
    } else {
      console.log('‚ùå Arquivo webhook n√£o encontrado');
      issues.push('Webhook do Cakto n√£o existe');
      allGood = false;
    }
    
    // Resultado final
    console.log('\n' + '='.repeat(50));
    if (allGood) {
      console.log('üéâ CONFIGURA√á√ÉO COMPLETA!');
      console.log('‚úÖ Todos os componentes est√£o configurados corretamente');
      console.log('\nüìã Resumo:');
      console.log('- Planos com pre√ßos corretos');
      console.log('- Links do Cakto configurados');
      console.log('- Tabela de transa√ß√µes criada');
      console.log('- Webhook completo e funcional');
      console.log('\nüöÄ O sistema est√° pronto para receber pagamentos!');
    } else {
      console.log('‚ö†Ô∏è  CONFIGURA√á√ÉO INCOMPLETA');
      console.log(`‚ùå ${issues.length} problema(s) encontrado(s):`);
      issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`);
      });
      console.log('\nüìñ Consulte o README-CONFIGURACAO-PLANOS.md para instru√ß√µes');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
    allGood = false;
  }
  
  return allGood;
}

verifyFinalSetup();